{"version":3,"sources":["components/Button.js","components/Input.js","components/ClearButton.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","className","value","children","isNaN","onClick","handleClick","Input","userInput","ClearButton","handleClear","App","state","textValue","addToInput","buttonTextValue","setState","handleEqualResult","math","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8VA4BeA,G,YAhBA,SAAAC,GAAK,OAWhB,aAVA,CAUA,OAAKC,UAAS,0BAjBCC,EAiB8BF,EAAMG,SAf3CC,MAAMF,IAAmB,MAATA,GAA0B,MAAVA,EAe8B,WAAP,OAAqBG,QAAS,kBAAIL,EAAMM,YAAYN,EAAMG,WAAzH,SACKH,EAAMG,WAlBI,IAAAD,ICGJK,G,MAJD,SAACP,GAAD,OACV,qBAAKC,UAAU,QAAf,SAAwBD,EAAMQ,cCMnBC,G,MARK,SAACT,GAAD,OAEhB,aADA,CACA,OAAKC,UAAU,YAAYI,QAASL,EAAMU,YAA1C,SAEKV,EAAMG,a,QC+DAQ,E,4MA9DXC,MAAQ,CACJC,UAAW,I,EAGfC,WAAa,SAAAC,GACT,EAAKC,SAAS,CAACH,UAAW,EAAKD,MAAMC,UAAYE,K,EAGrDE,kBAAoB,WAChB,EAAKD,SAAS,CAACH,UAAWK,IAAc,EAAKN,MAAMC,c,uDAE9C,IAAD,OACJ,OACI,qBAAKZ,UAAU,MAAf,SAEI,sBAAKA,UAAU,eAAf,UAII,cAAC,EAAD,CAAOO,UAAWW,KAAKP,MAAMC,YAC7B,sBAAKZ,UAAU,MAAf,UAKI,cAAC,EAAD,CAAQK,YAAaa,KAAKL,WAA1B,eACA,cAAC,EAAD,CAAQR,YAAaa,KAAKL,WAA1B,eACA,cAAC,EAAD,CAAQR,YAAaa,KAAKL,WAA1B,eACA,cAAC,EAAD,CAAQR,YAAaa,KAAKL,WAA1B,kBAEJ,sBAAKb,UAAU,MAAf,UACI,cAAC,EAAD,CAAQK,YAAaa,KAAKL,WAA1B,eACA,cAAC,EAAD,CAAQR,YAAaa,KAAKL,WAA1B,eACA,cAAC,EAAD,CAAQR,YAAaa,KAAKL,WAA1B,eACA,cAAC,EAAD,CAAQR,YAAaa,KAAKL,WAA1B,kBAEJ,sBAAKb,UAAU,MAAf,UACI,cAAC,EAAD,CAAQK,YAAaa,KAAKL,WAA1B,eACA,cAAC,EAAD,CAAQR,YAAaa,KAAKL,WAA1B,eACA,cAAC,EAAD,CAAQR,YAAaa,KAAKL,WAA1B,eACA,cAAC,EAAD,CAAQR,YAAaa,KAAKL,WAA1B,kBAEJ,sBAAKb,UAAU,MAAf,UAEI,cAAC,EAAD,CAAQK,YAAaa,KAAKL,WAA1B,eACA,cAAC,EAAD,CAAQR,YAAaa,KAAKL,WAA1B,eAIA,cAAC,EAAD,CAAQR,YAAa,kBAAI,EAAKW,qBAA9B,eACA,cAAC,EAAD,CAAQX,YAAaa,KAAKL,WAA1B,kBAIJ,cAAC,EAAD,CAAaJ,YAAa,kBAAK,EAAKM,SAAS,CAACH,UAAU,MAAxD,6B,GAxDFO,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.68992991.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';  //CSS\n\n//LOGIC Method/Function here\n//Create Boolean Method ()=>{} with PARAMETER value\n//CHECK IF the VALUE is a NUMBER: then RETURN the result of the Boolean\nconst isOperator = value => {\n    //function: isNaN() = Not a Number; so !isNaN() = it is a Number\n    return !isNaN(value) || value ===\".\" || value === \"=\"; //Return can be TRUE or FALSE\n}\n\n//this is the Actual Element of the COMPONENT in the APP.JS\nconst Button = props => (\n    //props.children = VALUE/TEXT/DATA inside of this DIV\n    //MAKING LOGIC in the STYLE className: Will Determine what Style will be applied\n    //Default className is button-wrapper; CALLING the Boolean Method isOperator(): will return if TRUE or NOT\n    //NOTICE: TO Determine the Style: in className there is a LOGIC: IF True useThe DEFAULT \"button-wrapper\" Else useThe \"operator\"\n    // props.handleClick is equalTo addToInput(buttonTextValue)Function == so it is expecting PARAMETER:\n    //Execute the props.handleClick by using arrowFunction: onClick = to arrowFunction\n    //Important: ONCE this Button is CLICK: that's only the time it will EXECUTE/CALL the FUNCTION props.handleClick(), the PARAMETER is the TEXT_VALUE of the BUTTON\n    //onClick={()=>props.handleClick(props.children) } BECAUSE in the APP.JS the PROPS only EQUATE the FUNCTION addToInput() and DID NOT use arrowFunction\n    //Important: SAMPLE of OVERLOADING contructor in JAVA: \"onClick={()=>props.handleClick(props.children)}\" this props.handleClick is CALLING ONLY the \"handleClick\" props with PARAMETER\n    //NOTICE: <ClearButton handleClear={()=>(this.setState({textValue:\"\"}))}>CLEAR </ClearButton> : ALready use arrowFunction to Execute the FUNCTION\n    <div className={`button-wrapper ${isOperator(props.children) ? null : \"operator\"}`} onClick={()=>props.handleClick(props.children) }>\n        {props.children}\n    </div>  \n) \n\nexport default Button;  //Export to be used for import by other ","import React from 'react';\nimport './Input.css'\n\n//Creating custom input element\n//USE \nconst Input = (props)=>(\n    <div className=\"input\">{props.userInput}</div>\n)\n\nexport default Input;","import React from 'react'\nimport './ClearButton.css'\n\n//expecting PARAMETER in this COMPONENT\nconst ClearButton = (props)=>(\n    // onClick props.handleClear == calling the handleClear Function\n    <div className=\"clear-btn\" onClick={props.handleClear} >\n        {/* props.children == any VALUE in BETWEEN this DIV */}\n        {props.children}\n    </div>\n)\n\nexport default ClearButton;","import {React, Component} from 'react'\nimport './App.css';\nimport Button from './components/Button'; //import Button to be able to use it\nimport Input from './components/Input'; //import Input to be able to use it\nimport ClearButton from './components/ClearButton'; //import ClearButton to be able to use it\nimport * as math from 'mathjs'; //Importing MathJs as math\n//testing for git pages\nclass App extends Component { \n    //Create State Object\n    state = { \n        textValue: \"\"\n    }\n    //Create arror Function with PARAMETER to Concatenate the TEXT in the INPUT: Using ()=>{} and not ()=>()\n    addToInput = buttonTextValue =>{\n        this.setState({textValue: this.state.textValue + buttonTextValue});\n    }\n    //Create arror Function with NO_PARAMETER to handle the EQUAL/RESULT PROCESS of the EQUATION\n    handleEqualResult = ()=>{\n        this.setState({textValue: math.evaluate(this.state.textValue)});\n    }\n    render(){  //RENDER \n        return (\n            <div className=\"app\">\n              {/* parentElement with calc-wrapper */}\n                <div className=\"calc-wrapper\">\n                {/* Input and Button = no className Needed, already designed in their component itself */}\n                {/* PROPS: VariableName, FunctionName that has TEXT VALUE or RETURN VALUE can be PASSED to the COMPONENT so it will be processed by the COMPONENT*/}\n                    {/* PASSING THE TEXT_VALUE as \"userInput\" in the component INPUT */}\n                    <Input userInput={this.state.textValue}></Input>\n                    <div className=\"row\">\n                         {/* childrenElement with row */}\n                         {/* <Button>7</Button> is one of the children of the parent DIV element  */}\n                         {/* 7, 8 , 9, / are children VALUE text of the COMPONTENT*/}\n                         {/* PASSING PROPS_NAME as \"handleClick\" which CALLING certain FUNCTION/METHOD in the component BUTTON */}\n                        <Button handleClick={this.addToInput}>7</Button>\n                        <Button handleClick={this.addToInput}>8</Button>\n                        <Button handleClick={this.addToInput}>9</Button>\n                        <Button handleClick={this.addToInput}>/</Button>\n                    </div>\n                    <div className=\"row\">\n                        <Button handleClick={this.addToInput}>4</Button>\n                        <Button handleClick={this.addToInput}>5</Button>\n                        <Button handleClick={this.addToInput}>6</Button>\n                        <Button handleClick={this.addToInput}>*</Button>\n                    </div>\n                    <div className=\"row\">\n                        <Button handleClick={this.addToInput}>3</Button>\n                        <Button handleClick={this.addToInput}>2</Button>\n                        <Button handleClick={this.addToInput}>1</Button>\n                        <Button handleClick={this.addToInput}>-</Button>\n                    </div>\n                    <div className=\"row\">\n                    {/* Just PASSING the functionName , addToInput*/}\n                        <Button handleClick={this.addToInput}>0</Button>\n                        <Button handleClick={this.addToInput}>.</Button>\n                        {/* Execute functionName thru arrowFunction */}\n                        {/* this.handleEqualResult will not be triggered in the BUTTON Component since it has no PARAMETER: only handleClick with PARAMETER will be execute in the BUTTON COMPONENT onCLICK */}\n                        {/* NOTICE: it is a sample of OVERLOADING contructor in the JAVA */}\n                        <Button handleClick={()=>this.handleEqualResult()}>=</Button>\n                        <Button handleClick={this.addToInput}>+</Button>\n                    </div>\n                    {/* Creating and Passing the props handleClear Function */}\n                    {/* action when click: set textValue = \"\" */}\n                    <ClearButton handleClear={()=>(this.setState({textValue:\"\"}))}>CLEAR </ClearButton>\n                    \n                </div>\n            </div> \n          );\n    }\n} \n\nexport default App;\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; //CSS importing no FROM\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root') //???\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}